components:
  schemas:
    Product:
      type: object
      properties:
        name:
          type: string
          description: "Product name."
        description:
          type: string
          description: "Detailed description of the product."
        stock:
          type: integer
          default: 1
          description: "Number of items available in stock."
        price:
          type: number
          default: 1
          description: "Product price."
        image:
          type: string
          format: uri
          default: "https://via.placeholder.com/150"
          description: "URL of the product image."
        category:
          type: string
          enum: ["", "computadoras", "perifericos", "celulares"]
          description: "Product category. Can be 'computadoras', 'perifericos', or 'celulares'."
        createdAt:
          type: string
          format: date-time
          description: "Timestamp of when the product was created."
        updatedAt:
          type: string
          format: date-time
          description: "Timestamp of the last update."
      required:
        - name
      example:
        _id: "679bdfebdd0337057c0395ca"
        name: "Fantastic Bronze Chicken"
        description: "The tan Salad combines Ethiopia aesthetics with Polonium-based durability"
        stock: 10
        price: 1168.4
        image: "https://loremflickr.com/164/3017?lock=3426585802408636"
        category: ""
        createdAt: "2025-01-30T20:24:11.572Z"
        updatedAt: "2025-01-30T20:24:11.572Z"
        __v: 0
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token

paths:
  /api/products:
    get:
      summary: Obtiene todos los productos.
      tags:
        - Products
      responses:
        "200":
          description: Lista de productos obtenida correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "500":
          description: Fatal Server Error.

    post:
      summary: Crea un producto.
      tags:
        - Products
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Producto creado exitosamente.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Datos de entrada incorrectos/Falta de Datos/Errores varios
        "401":
          description: Bad Auth!
        "500":
          description: Fatal Server Error.

  /api/products/{id}:
    get:
      summary: Obtiene un producto por id.
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Producto obtenido correctamente.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Producto no encontrado.
        "500":
          description: Fatal Server Error.

    put:
      summary: Modifica un producto por id.
      tags:
        - Products
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Producto actualizado correctamente.
        "400":
          description: Datos inv√°lidos.
        "404":
          description: Producto no encontrado.
        "401":
          description: Bad Auth!
        "500":
          description: Fatal Server Error.

    delete:
      summary: Elimina un producto por id.
      tags:
        - Products
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Producto eliminado correctamente.
        "404":
          description: Producto no encontrado.
        "401":
          description: Bad Auth!
        "500":
          description: Fatal Server Error.
