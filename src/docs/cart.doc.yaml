components:
  schemas:
    Cart:
      type: object
      properties:
        product_id:
          type: string
          format: uuid
          description: "Reference to the product being ordered."
        user_id:
          type: string
          format: uuid
          description: "Reference to the user placing the order."
        quantity:
          type: integer
          description: "Number of units ordered."
        state:
          type: string
          enum: ["reserved", "paid", "delivered"]
          default: "reserved"
          description: "Current status of the order."
        createdAt:
          type: string
          format: date-time
          description: "Timestamp of when the order was created."
        updatedAt:
          type: string
          format: date-time
          description: "Timestamp of the last update."
      required:
        - product_id
        - user_id
        - quantity
      example:
        _id: "67ccfa7d91d54f09a295037d"
        product_id: "6751e099a6e4cd89eda68ff0"
        user_id: "6750e0a0ab1a835a4ce66855"
        quantity: 1
        state: "reserved"
        createdAt: "2025-03-09T02:18:37.639Z"
        updatedAt: "2025-03-09T02:18:37.639Z"
        __v: 0

  responses:
    cart200:
      description: Carrito encontrado.
    cart201:
      description: Carrito creado.
    cart400:
      description: Faltante de datos.
    badAuth:
      description: Bad Auth !
    forbidden:
      description: Forbbiden !
    notFound:
      description: Not Found !

paths:
  /api/carts:
    get:
      summary: Obtiene todos los carritos.
      tags:
        - Carts
      security:
        - cookieAuth: []
      responses:
        "200":
          $ref: "#/components/responses/cart200"
        "401":
          $ref: "#/components/responses/badAuth"
        "500":
          $ref: "#/components/responses/Error500"

    post:
      summary: Crea un carrito de compra.
      tags:
        - Carts
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        "200":
          $ref: "#/components/responses/cart201"
        "400":
          $ref: "#/components/responses/cart400"
        "401":
          $ref: "#/components/responses/badAuth"
        "500":
          $ref: "#/components/responses/Error500"

  /api/carts/{id}:
    get:
      summary: Obtiene un carrito por id.
      tags:
        - Carts
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/cart200"
        "401":
          $ref: "#/components/responses/badAuth"
        "404":
          $ref: "#/components/responses/notFound"
        "500":
          $ref: "#/components/responses/Error500"
    put:
      summary: Modifica un carrito por id.
      tags:
        - Carts
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/cart200"
        "401":
          $ref: "#/components/responses/badAuth"
        "404":
          $ref: "#/components/responses/notFound"
        "500":
          $ref: "#/components/responses/Error500"
    delete:
      summary: Elimina un carrito por id.
      tags:
        - Carts
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/cart200"
        "401":
          $ref: "#/components/responses/badAuth"
        "404":
          $ref: "#/components/responses/notFound"
        "500":
          $ref: "#/components/responses/Error500"
